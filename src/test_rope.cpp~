#include "rope.h"
#include "simplescene.h"
#include "unistd.h"
#include "file_reading.h"
#include "grabbing.h"

using boost::shared_ptr;

int main() {

  const float table_height = .765;
  const float rope_radius = .01;
  const float segment_len = .025;
  const float table_thickness = .1;
  int nLinks = 50;

  btAlignedObjectArray<btVector3> ctrlPts;
  for (int i=0; i< nLinks; i++) {
    ctrlPts.push_back(btVector3(.5+segment_len*i,0,table_height+5*rope_radius));
  }


  shared_ptr <btMotionState> ms(new btDefaultMotionState(btTransform(btQuaternion(0, 0, 0, 1), btVector3(1,0,table_height-table_thickness/2))));
  shared_ptr<BulletObject> table(new BoxObject(0,btVector3(.75,.75,table_thickness/2),ms));

  shared_ptr<CapsuleRope> ropePtr(new CapsuleRope(ctrlPts,.01));

  Scene s = Scene(true, true);

  //s.env->add(ropePtr);
  //s.env->add(table);

  vector< vector<double> > joints;
  vector< int > inds;
  read_1d_array(inds, "../data/inds.txt");
  read_2d_array(joints,"../data/vals.txt");
  vector< vector<double> > transformsleft;
  vector< vector<double> > transformsright;
  read_2d_array(transformsleft,"../data/larm.txt");
  read_2d_array(transformsright,"../data/rarm.txt");
  int lind = 0;
  int rind = 0;

  int step = 0;

  //  btVector3 v = ropePtr->bodies[0]->getCenterOfMassPosition();
  RobotBase::ManipulatorPtr rarm(s.pr2->robot->GetManipulators()[5]);
  RobotBase::ManipulatorPtr larm(s.pr2->robot->GetManipulators()[7]);
  
  s.env->bullet->dynamicsWorld->setGravity(btVector3(0,0,-100.));
  Grab g;
  Grab g2;
  for (int i=0; i < 5000 && !s.viewer.done(); i++) {
    cout << i << endl;
    //vector<double> joint = joints[i];
    //s.pr2->setDOFValues(inds,joint);
    OpenRAVE::Transform targ = larm->GetEndEffectorTransform();
    vector<dReal> vsolution;
    btTransform transb = util::toBtTransform(targ);
    cout << transb.getOrigin().x() << ','
	 << transb.getOrigin().y() << ','
	 << transb.getOrigin().z() << endl;
    //trans.setOrigin(btVector3(0.76,0.55,1.15));
    //targ = util::toRaveTransform(trans); 
    vector <double> left = transformsleft[lind];
    vector <double> right = transformsright[rind]; 
    if (i == left[0]) {
      lind++;
      btMatrix3x3 mat(left[1],left[2],left[3],
		      left[4],left[5],left[6],
		      left[7],left[8],left[9]);
      btVector3 orig(left[10],left[11],left[12]);
      orig.setZ(orig.getY()/20+0.5);
      orig.setY(orig.getX()/30);
      orig.setX(orig.getZ());
      orig = orig;
      cout << orig.getX() << ',' << orig.getY() <<
	',' << orig.getZ() << endl;
      //trans.setIdentity();
      btTransform origTrans;
      s.pr2Right->grabber->motionState->getWorldTransform(origTrans);
      btTransform trans(origTrans);
      //btVector3 delta = orig-origTrans.getOrigin();
      //delta = delta.normalize()*0.2;
      trans.setOrigin(orig);
      //trans.setBasis(transb.getBasis());
      //trans.setBasis(mat);
      //OpenRAVE::Transform targ = util::toRaveTransform(trans);
      //larm->FindIKSolution(IkParameterization(targ),vsolution,true);
      //s.pr2->setDOFValues(larm->GetArmIndices(),vsolution);
      s.pr2Right->moveByIK(trans);
    }
    if (i == right[0]) {
      rind++;
      btMatrix3x3 mat(right[1],right[2],right[3],
		      right[4],right[5],right[6],
		      right[7],right[8],right[9]);
      btVector3 orig(right[10],right[11],right[12]);
      orig.setZ(orig.getY()/20+0.5);
      orig.setY(orig.getX()/30);
      orig.setX(orig.getZ());
      orig = orig;
      cout << orig.getX() << ',' << orig.getY() <<
	',' << orig.getZ() << endl;
      btTransform origTrans;
      s.pr2Left->grabber->motionState->getWorldTransform(origTrans);
      btTransform trans(origTrans);
      trans.setOrigin(orig);
      //trans.setBasis(mat);
      s.pr2Left->moveByIK(trans);
    }

    //larm->FindIKSolution(IkParameterization(targ), vsolution,true);
    //s.pr2->setDOFValues(larm->GetArmIndices(),vsolution);

    /*

    if (i == 160) {
      btVector3 rhpos = util::toBtTransform(rarm->GetEndEffectorTransform()).getOrigin();
      g = Grab(ropePtr->bodies[0].get(),rhpos,s.env->bullet->dynamicsWorld);
    }
    if (i > 160) {
      g.updatePosition(util::toBtTransform(rarm->GetEndEffectorTransform()).getOrigin());
    }


    if (i == 330) {
      btVector3 lhpos = util::toBtTransform(larm->GetEndEffectorTransform()).getOrigin();
      g2 = Grab(ropePtr->bodies[nLinks-2].get(),lhpos,s.env->bullet->dynamicsWorld);*/
    //}
    /*if (i > 330) {
      g2.updatePosition(util::toBtTransform(larm->GetEndEffectorTransform()).getOrigin());
      }*/



    /*
    btRigidBody* body = ropePtr->bodies[0].get();
    cout << "position at time " << ++step << ": " << 
      body->getCenterOfMassPosition().x() << " " <<
      body->getCenterOfMassPosition().y() << " " <<
      body->getCenterOfMassPosition().z() << " " << endl;
    */

    s.step(.01,300,.001);
    // usleep(10*1000);
  }

}
